// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>
#define ENABLE_SPAN_T
#define UNSAFE_BYTEBUFFER
#define BYTEBUFFER_NO_BOUNDS_CHECK

namespace SentisFlatBuffer
{

using global::System;
using global::System.Collections.Generic;
using global::Unity.Sentis.Google.FlatBuffers;

struct Tensor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Tensor GetRootAsTensor(ByteBuffer _bb) { return GetRootAsTensor(_bb, new Tensor()); }
  public static Tensor GetRootAsTensor(ByteBuffer _bb, Tensor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tensor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SentisFlatBuffer.ScalarType ScalarType { get { int o = __p.__offset(4); return o != 0 ? (SentisFlatBuffer.ScalarType)__p.bb.GetSbyte(o + __p.bb_pos) : SentisFlatBuffer.ScalarType.FLOAT; } }
  public int LengthByte { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FixedSizes(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FixedSizesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFixedSizesBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetFixedSizesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetFixedSizesArray() { return __p.__vector_as_array<int>(8); }
  public uint ConstantBufferIdx { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int StorageOffset { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public SentisFlatBuffer.TensorShapeDynamism ShapeDynamism { get { int o = __p.__offset(14); return o != 0 ? (SentisFlatBuffer.TensorShapeDynamism)__p.bb.GetSbyte(o + __p.bb_pos) : SentisFlatBuffer.TensorShapeDynamism.STATIC; } }
  public SentisFlatBuffer.EDim? DynamicSizes(int j) { int o = __p.__offset(16); return o != 0 ? (SentisFlatBuffer.EDim?)(new SentisFlatBuffer.EDim()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DynamicSizesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SentisFlatBuffer.Tensor> CreateTensor(FlatBufferBuilder builder,
      SentisFlatBuffer.ScalarType scalar_type = SentisFlatBuffer.ScalarType.FLOAT,
      int length_byte = 0,
      VectorOffset fixed_sizesOffset = default(VectorOffset),
      uint constant_buffer_idx = 0,
      int storage_offset = 0,
      SentisFlatBuffer.TensorShapeDynamism shape_dynamism = SentisFlatBuffer.TensorShapeDynamism.STATIC,
      VectorOffset dynamic_sizesOffset = default(VectorOffset)) {
    builder.StartTable(7);
    Tensor.AddDynamicSizes(builder, dynamic_sizesOffset);
    Tensor.AddStorageOffset(builder, storage_offset);
    Tensor.AddConstantBufferIdx(builder, constant_buffer_idx);
    Tensor.AddFixedSizes(builder, fixed_sizesOffset);
    Tensor.AddLengthByte(builder, length_byte);
    Tensor.AddShapeDynamism(builder, shape_dynamism);
    Tensor.AddScalarType(builder, scalar_type);
    return Tensor.EndTensor(builder);
  }

  public static void StartTensor(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddScalarType(FlatBufferBuilder builder, SentisFlatBuffer.ScalarType scalarType) { builder.AddSbyte(0, (sbyte)scalarType, 0); }
  public static void AddLengthByte(FlatBufferBuilder builder, int lengthByte) { builder.AddInt(1, lengthByte, 0); }
  public static void AddFixedSizes(FlatBufferBuilder builder, VectorOffset fixedSizesOffset) { builder.AddOffset(2, fixedSizesOffset.Value, 0); }
  public static VectorOffset CreateFixedSizesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFixedSizesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedSizesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFixedSizesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFixedSizesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConstantBufferIdx(FlatBufferBuilder builder, uint constantBufferIdx) { builder.AddUint(3, constantBufferIdx, 0); }
  public static void AddStorageOffset(FlatBufferBuilder builder, int storageOffset) { builder.AddInt(4, storageOffset, 0); }
  public static void AddShapeDynamism(FlatBufferBuilder builder, SentisFlatBuffer.TensorShapeDynamism shapeDynamism) { builder.AddSbyte(5, (sbyte)shapeDynamism, 0); }
  public static void AddDynamicSizes(FlatBufferBuilder builder, VectorOffset dynamicSizesOffset) { builder.AddOffset(6, dynamicSizesOffset.Value, 0); }
  public static VectorOffset CreateDynamicSizesVector(FlatBufferBuilder builder, Offset<SentisFlatBuffer.EDim>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDynamicSizesVectorBlock(FlatBufferBuilder builder, Offset<SentisFlatBuffer.EDim>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDynamicSizesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<SentisFlatBuffer.EDim>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDynamicSizesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<SentisFlatBuffer.EDim>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDynamicSizesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SentisFlatBuffer.Tensor> EndTensor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SentisFlatBuffer.Tensor>(o);
  }
}


static class TensorVerify
{
  static public bool Verify(Unity.Sentis.Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ScalarType*/, 1 /*SentisFlatBuffer.ScalarType*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*LengthByte*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*FixedSizes*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 10 /*ConstantBufferIdx*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*StorageOffset*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ShapeDynamism*/, 1 /*SentisFlatBuffer.TensorShapeDynamism*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 16 /*DynamicSizes*/, SentisFlatBuffer.EDimVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
